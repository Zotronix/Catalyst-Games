<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="" />
<Content type="html"><![CDATA[


<!DOCTYPE html>

<html lang="en-us">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<title>Dress to Impress</title>
<link rel="stylesheet" href="https://ww-sites-opensocial.googleusercontent.com/gadgets/proxy/refresh=3600&container=enterprise/https://app-355059.games.s3.yandex.net/355059/zo98v4p61iwhhctrfczqmsnz6pdx451o/TemplateData/style.css"/>
<script src="https://ww-sites-opensocial.googleusercontent.com/gadgets/proxy/refresh=3600&container=enterprise/https://app-355059.games.s3.yandex.net/355059/zo98v4p61iwhhctrfczqmsnz6pdx451o/TemplateData/gamepush-unity.js"></script>
<script>
    const projectId = "14336";
    const publicToken = "xg8qEF1O3AWyY1qsGNQrWhzc5YbsezQs";
    const showPreloaderAd = "True";
    const overlayBackgroundColor = "";
    const progressBarFillColor = "";
    const progressBarBackgroundColor = "";
    const progressBarBorderColor = "";

    const autocallGameReady = "";
  </script>
<script>
    var _unityAwaiter = {};
    _unityAwaiter.ready = new Promise((resolve, reject) => {
      _unityAwaiter.done = resolve;
      _unityAwaiter.abort = reject;
    });

    var _gpAwaiter = {};
    _gpAwaiter.ready = new Promise((resolve) => {
      _gpAwaiter.done = resolve;
    });

    window.unityInstance = null;
    window.onGPError = async () => {
      _gpAwaiter.done();
      await _unityAwaiter.ready;
      window.unityInstance.SendMessage('GamePushSDK', 'CallOnSDKError');
    }

    window.onGPInit = async (gp) => {
      if (showPreloaderAd == "True" || showPreloaderAd == "1") {
        gp.ads.showPreloader();
      }

      window.GamePush = new GamePushUnity(gp);
      gp.player.ready.finally(_gpAwaiter.done);

      console.info("GamePush initialization in index.html deprecated!!!")
      await _unityAwaiter.ready;
      await _gpAwaiter.done;
      window.unityInstance.SendMessage('GamePushSDK', 'CallOnSDKReady');

      if (autocallGameReady != null && parseFloat(autocallGameReady) > 0) {
        setTimeout(() => gp.gameStart(), parseFloat(autocallGameReady));
      }
    };
  </script>
<script>
    ((g, a, m, e) => { 
      let o = () => { 
        let p = document.createElement("script"); 
        p.src = `${a[0]}?projectId=${m}&publicToken=${e}`, 
        p.onerror = () => { 
          a.shift(), 
          a.length > 0 ? (o(), 
          p.remove()) : "onGPError" in g && g.onGPError() }, 
          document.head.appendChild(p) 
        }; 
        o() 
      })(window, ["https://gs.eponesh.com/sdk/gamepush.js", 
      "https://s3.eponesh.com/files/gs/sdk/gamepush.js", 
      "https://ww-sites-opensocial.googleusercontent.com/gadgets/proxy/refresh=3600&container=enterprise/https://app-355059.games.s3.yandex.net/355059/zo98v4p61iwhhctrfczqmsnz6pdx451o/TemplateData/gp_bundle/gamepush.js"], 
      projectId, 
      publicToken);
  </script>
</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas"></canvas>
</div>
<div id="loading-cover" style="display:none;">
<div id="unity-loading-bar">
<div id="unity-logo"><img src="https://ww-sites-opensocial.googleusercontent.com/gadgets/proxy/refresh=3600&container=enterprise/https://app-355059.games.s3.yandex.net/355059/zo98v4p61iwhhctrfczqmsnz6pdx451o/logo.png"/></div>
<div id="unity-progress-bar-empty" style="display: none;">
<div id="unity-progress-bar-full"></div>
</div>
<div class="spinner"></div>
</div>
</div>
<script>
    const buildUrl = "https://ww-sites-opensocial.googleusercontent.com/gadgets/proxy/refresh=3600&container=enterprise/https://app-355059.games.s3.yandex.net/355059/zo98v4p61iwhhctrfczqmsnz6pdx451o/Build";
    const loaderUrl = buildUrl + "/Dress to Impress v1.3.loader.js";
    const config = {
      dataUrl: buildUrl + "/2ab4104842449591e3c7a447581e7c98.data.br",
      frameworkUrl: buildUrl + "/b799654dc695eedfce4cdc85caadd337.js.br",
      codeUrl: buildUrl + "/fd6b7019526c787d2cd2a122a406c55b.wasm.br",
      streamingAssetsUrl: "https://ww-sites-opensocial.googleusercontent.com/gadgets/proxy/refresh=3600&container=enterprise/https://app-355059.games.s3.yandex.net/355059/zo98v4p61iwhhctrfczqmsnz6pdx451o/StreamingAssets",
      companyName: "GingerPlay",
      productName: "Dress to Impress",
      productVersion: "0.1",
    };

    const container = document.querySelector("#unity-container");
    const canvas = document.querySelector("#unity-canvas");
    const loadingCover = document.querySelector("#loading-cover");
    const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
    const progressBarFull = document.querySelector("#unity-progress-bar-full");
    const spinner = document.querySelector('.spinner');

    if (overlayBackgroundColor !== "-" && overlayBackgroundColor !== " " && overlayBackgroundColor !== "")
      canvas.style.background = overlayBackgroundColor;

    if (progressBarFillColor !== "-" && progressBarFillColor !== " " && progressBarFillColor !== "")
      progressBarFull.style.background = progressBarFillColor;

    if (progressBarBackgroundColor !== "-" && progressBarBackgroundColor !== " " && progressBarBackgroundColor !== "")
      progressBarEmpty.style.background = progressBarBackgroundColor;

    if (progressBarBorderColor !== "-" && progressBarBorderColor !== " " && progressBarBorderColor !== "")
      progressBarEmpty.style.border.color = progressBarBorderColor;


    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
      container.className = "unity-mobile";
    }

    loadingCover.style.display = "";

    const unityLoader = document.createElement("script");
    unityLoader.src = loaderUrl;
    unityLoader.onload = async () => {
      await _gpAwaiter.ready;
      createUnityInstance(canvas, config, (progress) => {
        spinner.style.display = "none";
        progressBarEmpty.style.display = "";
        progressBarFull.style.width = `${100 * progress}%`;
      }).then((unityInstance) => {
        window.unityInstance = unityInstance;
        _unityAwaiter.done(unityInstance);
        loadingCover.style.display = "none";
      }).catch((message) => {
        _unityAwaiter.abort(message);
        alert(message);
      });
    };
    document.body.appendChild(unityLoader);

    document.addEventListener("pointerdown", () => {
      container.focus();
      window.focus();
      canvas.focus();
    });

    let myGameInstance = null;
        let payments = null;
        let nowFullAdOpen = false;
        let letGameReadyApi = true;
        let ysdk = null;

        const script = document.createElement("script");
        script.src = loaderUrl;
        script.onload = () => {
            createUnityInstance(canvas, config, (progress) => {
                spinner.style.display = "none";
                progressBarEmpty.style.display = "";
                progressBarFull.style.width = `${100 * progress}%`;
            }).then((unityInstance) => {
                myGameInstance = unityInstance;
                loadingCover.style.display = "none"; // Hide loading cover
            }).catch((message) => { /* Handle errors */ });
        };
        
        document.body.appendChild(script);

    let playerData = 'noData';
    let environmentData = 'null';
    let cloudSaves = 'noData';

    function InitSDK(photoSize, scopes) {
        console.log('Init GAME');
        letGameReadyApi = true;
        photoSizeForInit = photoSize;
        scopesForInit = scopes;
        InitPlayer(photoSize, scopes);
    }

    function InitPlayer(photoSize, _scopes) {
        NotAuthorized();
        window.focus();
    }

    function NotAuthorized() {
        try {
            console.log('Authorization failed');
            let authJson = {
                "playerAuth": "rejected",
                "playerName": "unauthorized",
                "playerId": "unauthorized",
                "playerPhoto": "null"
            };
            myGameInstance.SendMessage('YandexGame', 'SetInitializationSDK', JSON.stringify(authJson));
        } catch (e) {
            console.error('CRASH Not Authorized: ', e.message);
        }
    }

    function OpenAuthDialog(photoSize, scopes) {
        try {
            ysdk.auth.openAuthDialog().then(() => {
                InitPlayer(photoSize, scopes);
            }).catch(() => {
                InitSDK(photoSize, scopes);
            });
        } catch (e) {
            console.log('CRASH Open Auth Dialog: ', e.message);
        }
    }

    function FullAdShow() {
        try {
            window.ysdk.adv.showFullscreenAdv({
                callbacks: {
                    onOpen: () => {
                        console.log('Open Fullscreen Ad');
                        nowFullAdOpen = true;
                        if (letGameReadyApi === true) {
                            myGameInstance.SendMessage('YandexGame', 'OpenFullAd');
                        }
                    },
                    onClose: (wasShown) => {
                        nowFullAdOpen = false;
                        if (letGameReadyApi === true) {
                            myGameInstance.SendMessage('YandexGame', 'CloseFullAd', wasShown ? 'true' : 'false');
                        }
                        window.focus();
                    },
                    onError: (error) => {
                        console.error('Error Fullscreen Ad', error);
                        myGameInstance.SendMessage('YandexGame', 'ErrorFullAd');
                        window.focus();
                    }
                }
            });
        } catch (e) {
            console.error('CRASH FullAd Show: ', e.message);
        }
    }

    function RewardedShow(id) {
        try {
            window.ysdk.adv.showRewardedVideo({
                callbacks: {
                    onOpen: () => {
                        console.log('Opened Video Ad. Id: ' + id);
                        myGameInstance.SendMessage('YandexGame', 'OpenVideo');
                    },
                    onClose: () => {
                        console.log('Closed Video Ad. Id: ' + id);
                        myGameInstance.SendMessage('YandexGame', 'CloseVideo');
                        window.focus();
                    },
                    onRewarded: () => {
                        console.log('Reward Video Ad. Id: ' + id);
                        myGameInstance.SendMessage('YandexGame', 'RewardVideo', id);
                    },
                    onError: (e) => {
                        console.error('Error Video Ad. Id: ' + id, e);
                        myGameInstance.SendMessage('YandexGame', 'ErrorVideo');
                    }
                }
            });
        } catch (err) {
            console.error('CRASH Rewarded Video Ad Show: ', err.message);
        }
    }

    function InitPayments() {
        try {
            ysdk.getPayments().then(_payments => {
                console.log('Purchases are available');
                payments = _payments;
            }).catch(e => {
                console.log('Purchases are not available', e.message);
            });
        } catch (e) {
            console.error('CRASH Init Payments: ', e.message);
        }
    }

    function BuyPayments(id) {
    try {
        if (payments != null) {
            payments.purchase(id).then(() => {
                console.log('Purchase Success');
                ConsumePurchase(id);
                window.focus();
            }).catch(e => {
                console.error('Purchase Failed', e);
                myGameInstance.SendMessage('YandexGame', 'OnPurchaseFailed', id);
                window.focus();
            });
        } else {
            console.log('Payments == null');
        }
    } catch (e) {
        console.error('CRASH Buy Payments: ', e);
        window.focus();
    }
}


    function GetPayments() {
        try {
            if (payments != null) {
                payments.getCatalog().then(products => {
                    let productID = [];
                    let title = [];
                    let description = [];
                    let imageURI = [];
                    let priceValue = [];
                    let consumed = [];

                    payments.getPurchases().then(purchases => {
                        for (let i = 0; i < products.length; i++) {
                            productID[i] = products[i].id;
                            title[i] = products[i].title;
                            description[i] = products[i].description;
                            imageURI[i] = products[i].imageURI;
                            priceValue[i] = products[i].priceValue;
                            consumed[i] = true;

                            for (let i2 = 0; i2 < purchases.length; i2++) {
                                if (purchases[i2].productID === productID[i]) {
                                    consumed[i] = false;
                                    break;
                                }
                            }
                        }
                        let jsonPayments = {
                            "id": productID,
                            "title": title,
                            "description": description,
                            "imageURI": imageURI,
                            "priceValue": priceValue,
                            "consumed": consumed
                        };
                        myGameInstance.SendMessage('YandexGame', 'PaymentsEntries', JSON.stringify(jsonPayments));
                    });
                });
            } else {
                console.log('Get Payments: payments == null');
            }
        } catch (e) {
            console.error('CRASH Get Payments: ', e.message);
        }
    }

    function ConsumePurchase(id) {
        try {
            if (payments != null) {
                payments.getPurchases().then(purchases => {
                    for (let i = 0; i < purchases.length; i++) {
                        if (purchases[i].productID === id) {
                            payments.consumePurchase(purchases[i].purchaseToken);
                            myGameInstance.SendMessage('YandexGame', 'OnPurchaseSuccess', id);
                        }
                    }
                });
            } else {
                console.log('Consume purchase: payments null');
            }
        } catch (e) {
            console.error('CRASH Consume Purchase: ', e.message);
        }
    }

    function SaveCloud(jsonData, flush) {
        try {
            player.setData({ saves: [jsonData] }, flush);
        } catch (e) {
            console.error('CRASH Save Cloud: ', e.message);
        }
    }

    function LoadCloud() {
        try {
            player.getData(["saves"]).then(data => {
                if (data.saves) {
                    myGameInstance.SendMessage('YandexGame', 'SetLoadSaves', JSON.stringify(data.saves));
                } else {
                    myGameInstance.SendMessage('YandexGame', 'SetLoadSaves', "noData");
                }
            }).catch(() => {
                console.error('getData Error!');
                myGameInstance.SendMessage('YandexGame', 'SetLoadSaves', "noData");
            });
        } catch (e) {
            console.error('CRASH Load saves Cloud: ', e.message);
            myGameInstance.SendMessage('YandexGame', 'SetLoadSaves', "noData");
        }
    }

    function InitLeaderboard() {
        try {
            ysdk.getLeaderboards().then(_lb => {
                leaderboard = _lb;
                myGameInstance.SendMessage('YandexGame', 'InitializedLB');
            });
        } catch (e) {
            console.error('CRASH Init Leaderboard: ', e.message);
        }
    }

    function SetLeaderboardScores(_name, score) {
        try {
            ysdk.getLeaderboards().then(leaderboard => {
                leaderboard.setLeaderboardScore(_name, score);
            });
        } catch (e) {
            console.error('CRASH Set Leaderboard Scores: ', e.message);
        }
    }

    function GetLeaderboardScores(nameLB, maxPlayers, quantityTop, quantityAround, photoSize, auth) {
        try {
            var jsonEntries = {
                technoName: '',
                isDefault: false,
                isInvertSortOrder: false,
                decimalOffset: 0,
                type: ''
            };
            ysdk.getLeaderboards().then(leaderboard => {
                return leaderboard.getLeaderboardDescription(nameLB);
            }).then(res => {
                jsonEntries.technoName = nameLB;
                jsonEntries.isDefault = res.default;
                jsonEntries.isInvertSortOrder = res.description.invert_sort_order;
                jsonEntries.decimalOffset = res.description.score_format.options.decimal_offset;
                jsonEntries.type = res.description.type;
                return leaderboard.getLeaderboardEntries(nameLB, {
                    quantityTop: quantityTop,
                    includeUser: auth,
                    quantityAround: quantityAround
                });
            }).then(res => {
                let jsonPlayers = EntriesLB(res, maxPlayers, photoSize);
                let combinedJson = { ...jsonEntries, ...jsonPlayers };
                myGameInstance.SendMessage('YandexGame', 'LeaderboardEntries', JSON.stringify(combinedJson));
            }).catch(error => {
                console.error(error);
            });
        } catch (e) {
            console.error('CRASH Get Leaderboard: ', e.message);
        }
    }

    function EntriesLB(res, maxPlayers, photoSize) {
        let LeaderboardEntriesText = [];
        let playerName = [];
        let playerScore = [];
        let playerId = [];
        let playerPhoto = [];
        for (let i = 0; i < Math.min(res.entries.length, maxPlayers); i++) {
            LeaderboardEntriesText[i] = res.entries[i].playerName;
            playerName[i] = res.entries[i].playerName;
            playerScore[i] = res.entries[i].score;
            playerId[i] = res.entries[i].playerId;
            playerPhoto[i] = res.entries[i].photoUrl ? res.entries[i].photoUrl : 'null';
        }
        return {
            LeaderboardEntriesText,
            playerName,
            playerScore,
            playerId,
            playerPhoto
        };
    }

  </script>
</body>
</html>


]]></Content>
</Module>
